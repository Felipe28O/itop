<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'twig' shared service.

include_once $this->targetDirs[4].'/lib/twig/twig/src/Environment.php';
include_once $this->targetDirs[4].'/lib/twig/twig/src/Extension/ExtensionInterface.php';
include_once $this->targetDirs[4].'/lib/twig/twig/src/Extension/AbstractExtension.php';
include_once $this->targetDirs[4].'/lib/symfony/twig-bridge/Extension/TranslationExtension.php';
include_once $this->targetDirs[4].'/lib/symfony/twig-bridge/Extension/CodeExtension.php';
include_once $this->targetDirs[4].'/lib/symfony/twig-bridge/Extension/RoutingExtension.php';
include_once $this->targetDirs[4].'/lib/symfony/twig-bridge/Extension/YamlExtension.php';
include_once $this->targetDirs[4].'/lib/symfony/twig-bridge/Extension/StopwatchExtension.php';
include_once $this->targetDirs[4].'/lib/symfony/twig-bridge/Extension/HttpKernelExtension.php';
include_once $this->targetDirs[4].'/lib/symfony/twig-bridge/Extension/HttpFoundationExtension.php';
include_once $this->targetDirs[4].'/env-production/itop-portal-base/portal/src/Twig/AppVariable.php';
include_once $this->targetDirs[4].'/lib/symfony/twig-bridge/AppVariable.php';
include_once $this->targetDirs[4].'/lib/twig/twig/src/RuntimeLoader/RuntimeLoaderInterface.php';
include_once $this->targetDirs[4].'/lib/twig/twig/src/RuntimeLoader/ContainerRuntimeLoader.php';
include_once $this->targetDirs[4].'/lib/symfony/twig-bundle/DependencyInjection/Configurator/EnvironmentConfigurator.php';
include_once $this->targetDirs[4].'/lib/symfony/stopwatch/Stopwatch.php';
include_once $this->targetDirs[4].'/env-production/itop-portal-base/portal/src/Twig/AppExtension.php';

$this->services['twig'] = $instance = new \Twig\Environment(${($_ = isset($this->services['twig.loader']) ? $this->services['twig.loader'] : $this->load('getTwig_LoaderService.php')) && false ?: '_'}, ['debug' => false, 'strict_variables' => false, 'autoescape' => 'name', 'cache' => ($this->targetDirs[0].'/twig'), 'charset' => 'UTF-8']);

$a = ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())) && false ?: '_'};
$b = new \Symfony\Bridge\Twig\AppVariable();
$b->setEnvironment('prod');
$b->setDebug(false);
if ($this->has('request_stack')) {
    $b->setRequestStack($a);
}

$instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension(NULL));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : ($this->services['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL))) && false ?: '_'}, ($this->targetDirs[4].'/env-production/itop-portal-base/portal/src'), 'UTF-8'));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension(${($_ = isset($this->services['url_generator']) ? $this->services['url_generator'] : $this->getUrlGeneratorService()) && false ?: '_'}));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension(${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : ($this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true))) && false ?: '_'}, false));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension($a, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}));
$instance->addExtension(${($_ = isset($this->services['Combodo\\iTop\\Portal\\Twig\\AppExtension']) ? $this->services['Combodo\\iTop\\Portal\\Twig\\AppExtension'] : ($this->services['Combodo\\iTop\\Portal\\Twig\\AppExtension'] = new \Combodo\iTop\Portal\Twig\AppExtension())) && false ?: '_'});
$instance->addGlobal('app', new \Combodo\iTop\Portal\Twig\AppVariable($b, $this));
$instance->addRuntimeLoader(new \Twig\RuntimeLoader\ContainerRuntimeLoader(new \Symfony\Component\DependencyInjection\ServiceLocator(['Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => function () {
    return ${($_ = isset($this->services['twig.runtime.httpkernel']) ? $this->services['twig.runtime.httpkernel'] : $this->load('getTwig_Runtime_HttpkernelService.php')) && false ?: '_'};
}])));
(new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','))->configure($instance);

return $instance;
